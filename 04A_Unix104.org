# #+TITLE: Digital Biology
#+AUTHOR: Rodolfo Aramayo
#+EMAIL: raramayo@tamu.edu
#+STARTUP: align
# [[http://www.lynda.com/Bash-tutorials/Working-variables/142989/156641-4.html][Bash-Tutorial]]
*Advanced BASH*

*GREP (Global Regular Expression Print)*
+ Also known as Regular Expression Parser
+ Original command-line text search utility
  + In sed (stream editor)
    : g/re/p or global/regfular expression/print
*Regular Expression (regexp)*
+ Describes text and text patterns
+ Do not have to contain literal text
+ Comprised of metacharacters
+ Metacharacters are processed by 'parsing'
*Text Searching versus Grep Searching*
+ Text searching is literal, whereas GREP searching is abstract and conditional
+ Text is finite - GREP is flexible
+ Text looks for characters (what) - GREP looks for locations (where and what)
+ GREP remembers what it found and can be directed to re-use it
+ GREP searches for patterns and most text can be described as a pattern
*Pattern Searching*
+ A Phone number as an example
  : 979-694-1234             <- As 'mortals' see it
  : \d\d\d-\d\d\d-\d\d\d\d   <-As GREP see it
  : \d+-\d+-\d+
+ cd /home/username/Documents/DBiology
+ mkdir DB_20180328 && cd DB_20180328
+ cp -v /home/username/Documents/DBiology/DB_20180326/list .
+ GREPping *list*
  : cat list
  : grep 111 list or
  : grep '111' list or
  : grep "list" or  <-Preferred
  : cat list | grep 111 or and so on...
  + This returns the *lines* not only the *text*
+ To search in a text *insensitive* manner use the flag *-i*
  : echo -e "Apple\napple\nBanana\nbanana\nPineapple\npineapple" >> list
  : grep "Banana"
  : grep "Apple"
  : grep "Banana|Apple"
  : grep -E "Banana|Apple"
  : grep -E -i "Banana|Apple"
+ To search for text that *does not match* your text search pattern use the *-v* flag
  : : grep -E -i -v "Banana|Apple"
+ To search for *whole words* in your text search pattern use the *-w* flag
  : : grep -E -i  "Banana|Apple"
  : : grep -E -i -w "Banana|Apple"
+ To add number lines to your search use the *-n* flag
  : cat list | grep -n "111"
+ To *count* the number of hits use the *-c* flag
  : cat list | grep -c "111"
+ To *recursively* search for a given patter inside the files of a directory use the *-R* flag
  : grep -R /home/username/Documents/DBiology/DB_20180328/*
  : grep -R -n /home/username/Documents/DBiology/DB_20180328/*
  : grep -R -h /home/username/Documents/DBiology/DB_20180328/*
  : grep -R -l /home/username/Documents/DBiology/DB_20180328/*
*Regular Expressions*
: cat list | grep "111"
: cat list | grep "^1"
: cat list | grep "1$"
: cat list | grep "12"
: cat list | grep "12[34]"
: cat list | grep -E "[[:digit:]]+2[34]"
+ Symbols representing a text pattern
+ Formal language interpreted by a regular expression processor (e.g., grep)
+ Used for matching, searching and replacing text
+ They are NOT a prgramming language
+ They have a set of rules
+ These rules tell the computer what to do
+ Most programmming languages use regular expressions
+ Most programmers probably used regular expressions the most, but they have no variables and you cannot add "1+"
+ They are symbols to describe a text pattern
+ A regexp 'matches' text if it describes the text
+ Text 'matches' a regexp if it is correctly described by the regexp
+ Character Class or "[]"
: /a[xyz]c/    matches "axc" or "ayc" or "azc"
: /a[xyz]c/    does not match "axyzc"
: /a[a-z]c/    matches "abc"
: /a[a-zA-z]c/ matches "abc" or "aBc"  
: /a[^xyz]c/   does not match "axc" or "ayc" or "azc"
: /a[^a-z]c/   does not match "abc" or "ayc" or "azc"
+ "*" Matches zero or more repeats of the previous item
: /ab*c/ matches "abc" or "abbbbbc" or "ac" but not "axc"
+ "()" Repeats Multiple Times
: /ab*c/   matches "abbbbc"
: /(ab)*c/ matches "ababababc"
+ *Greedy* Characters
  + the quantifiers +, *, ? and {} are “greedy.” That is, they will
    always make the longest possible match possible to a given
    pattern, so if your pattern is E+(one or more E’s) and your text
    contains “EEEE”, the pattern matches all the E’s at once, not just
    the first one
: /<.*>     matches all of "<i>Italic Text</i>"
: /<[^>]*>/ matches only "<i>Italic Text</i>"
+ The wild-card character "." Matches any character except a ‘hard’ line break
+ The wild-card character "^" Matches beginning of a line (unless used in a character class)
+ The wild-card character "$" Matches end of line (unless used in a character class)
+ You can combine ^ and $ within a pattern to force a match to constitute an entire line
: ^foo$ <-will only match “foo” on a line by itself, with no other characters
+ Other Positional Assertions
| Escape | Matches                                          |
| \A     | only at the beginning of the document (as        |
|        | opposed to ^, which matches at the beginning     |
|        | of the document and also at the beginning of     |
|        | each line)                                       |
| \b     | any word boundary, defined as any position       |
|        | between a \w character and a \W character, in    |
|        | either order                                     |
| \B     | any position that is not a word boundary         |
| \z     | at the end of the document (as opposed to $,     |
|        | which matches at the end of the document and     |
|        | also at the end of each line)                    |
| \Z     | at the end of the document, or before a trailing |
|        | return at the end of the doc, if there is one    |
+ Matching Non-Printing Characters
| Character | Matches                |
| \r        | ‘hard’ line break      |
| \n        | ‘hard’ line break      |
| \t        | tab                    |
| \f        | page break (form feed) |
+ Other Special Character Classes
| Special character | Matches                                         |
| \s                | any whitespace character (space, tab, carriage  |
|                   | return, line feed, form feed)                   |
| \S                | any non-whitespace character (any character     |
|                   | not included by \s)                             |
| \w                | any word character (a-z, A-Z, 0-9, _, and some  |
|                   | 8-bit characters)                               |
| \W                | any non-word character (all characters not      |
|                   | included by \w, including line breaks)          |
| \d                | any digit (0-9)                                 |
| \D                | any non-digit character (including line breaks) |
+ Quantifiers Repeat Subpatterns
| Pattern    | Matches                                         |
| p*         | zero or more p’s                                |
| p+         | one or more p’s                                 |
| p?         | zero or one p’s                                 |
| p{COUNT}   | match exactly COUNT p’s, where COUNT is an      |
|            | integer                                         |
| p{MIN,}    | match at least MIN p’s, where MIN is an integer |
| p{MIN,MAX} | match at least MIN p’s, but no more than MAX    |
+ *[[http://www.rexegg.com/regex-quickstart.html][Regular Expressions Syntax]]*
+ *[[http://pubs.opengroup.org/onlinepubs/9699919799/nframe.html][OPEN Group Base Specifications]]*
*Translating Characters*
: echo "a,b,c" | tr "," "-"
: echo "1234564321" | tr "123456" "EBGDAE"
: echo "12345643219" | tr "123456" "EBGDAE"
: echo "This is ROT-13 encrypted" | tr "A-Za-z" "N-ZA-Mn-za-m"
: echo "Guvf vf EBG-13 rapelcgrq" | tr "A-Za-z" "N-ZA-Mn-za-m"
: echo "already daytime" | tr "day" "night" <-Not Find and Replace
: echo "Ban Tan Cat Tac Dog Got" | tr "[:upper:]" "[:lower:]"
: echo "Ban Tan Cat Tac Dog Got" | tr "[A-Z]" "[a-z]"
: echo "Ban,Tan,Cat,Tac,Dog,Got" | tr "[,]" "[\t]"
: echo "Ban,Tan,Cat,Tac,Dog,Got" | tr "[,]" "[\t]" | cat -t
: echo "Ban,Tan,Cat,Tac,Dog,Got" | tr "[,]" "[\t]" | cat -te
*Deleting and Squeezing Characters*
: | Option | Description                          |
: | -d     | Delete characters                    |
: | -s     | Squeeze characters                   |
: | -c     | Use complementa set                  |
: | -dc    | Delete characters not in listed set  |
: | -sc    | Squeeze characters not in listed set |
: 
: echo "abc123333deee4567fg" | tr -d "[:digit:]"                <-Delete Digits (not letters)
: echo "abc123333deee4567fg" | tr -dc "[:digit:]"               <-Delete Complement Digits (letters)
: 
: echo "abc123333deee4567fg" | tr -s "[:digit:]"                <-Squeeze digits
: echo "abc123333deee4567fg" | tr -sc "[:digit:]"               <-Squeeze Complement Digits
: 
: echo "abc123333deee4567fg" | tr -ds "[:digit:]" "[:alpha:]"   <-Translate Digits to Letters
: echo "abc123333deee4567fg" | tr -dsc "[:digit:]" "[:alpha:]"  <-Translate Squeeze Complement Digits to Letters 
*SED: Stream Editor*
: sed 's/a/b/'
:      s=substitution
:      a=search string
:      b=replacement string
: 
: echo "upstream" | sed 's/up/down/' <-Find and Replace
: echo "upstream and upward" | sed 's/up/down/'
: echo "upstream and upward" | sed 's/up/down/g'
: echo "upstream and upward" | sed 's:up:down:g'
: echo "upstream and upward" | sed 's|up|down|g'
: 
: echo "during daytime we have sunlight" | sed 's/day/night/'
: echo "during daytime we have sunlight" | sed -e 's/day/night/' -e 's/sun/moon/'
: 
: Using Regexp:
: echo "who needs vowels?" | sed 's/[aeiou]/_/g'
: To use extended Regexp:
: echo "who needs vowels?" | sed 's/[aeiou]+/_/g'
: echo "who needs vowels?" | sed -E 's/[aeiou]+/_/g' <-Note the 'E' flag
: 
: Using Backreferences:
: 
: echo "daytime" | sed 's/(...)time/\1light/'    <-Does not work
: echo "daytime" | sed 's/\(...\)time/\1light/'  <-Does work
: echo "daytime" | sed -E 's/(...)time/\1light/' <-Does work
: echo "dddtime" | sed -E 's/(...)time/\1light/' <-Does work
: 
: echo "FirstName LastName" | sed -E 's/([A-Za-z]+) ([A-Za-z]+)/\2, \1/'
*CUT*
: mkdir DB_20180402
: ll / > root.txt
: cat root.txt | cut -c 2-10            #<-Character cut
: cat root.txt | cut -c 2-10,30-35      #<-Character cut
: cat root.txt | cut -c 2-10,30-35,45-  #<-Character cut
: 
