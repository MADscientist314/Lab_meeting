# #+TITLE: Digital Biology
#+AUTHOR: Rodolfo Aramayo
#+EMAIL: raramayo@tamu.edu
#+STARTUP: align
# [[http://www.lynda.com/Bash-tutorials/Working-variables/142989/156641-4.html][Bash-Tutorial]]
*Advanced BASH*
*Tilde and brace expansion -- Expansions*
: cd                          # Home
: cd ~                        # ~ = /home/username
: touch {01, 02, 03, 04}
: touch {05..10}
: touch File_{11..1000}
: rm *
: touch File_{01..10}
: rm *
: touch File_{01..20..2}
: rm *
: echo {A..Z}
: echo {w..d..2}
: rm *
: touch {apple,banana,cherry}_{01..100}{w..d}
: ls -1 | wc -l
*Changing where things go with pipes and redirection*
: ls | more                   # Takes advantage of more pagination
: mkdir ../otherdir
: chmod 000 *_015*            # To induce errors
: ll
: ll | nl
: ll | nl | head
*Using find*
: find . -type f -perm 664 -exec dir -l {} + | nl
: find . -type f -perm 000 -exec dir -l {} + | nl
: cp -v * ../otherdir 1>../otherdir/z-stdout.log 2>../otherdir/z-stderr.log
: cd ../otherdir
: ll
: less z-stdout.log 
: less z-stderr.log
: rm * && cd -
: cp -v * ../otherdir &> ../otherdir/zall.log
: cd -
: less zall.log 
*Using /dev/null*
: ls
: ls > /dev/null
*Manipulating output with grep, awk, and cut*
+ *grep*
: cp auth.log as per my instructions
: grep "localadmin" auth.log
: grep -i "break" auth.log
: grep -i "break" auth.log | less -S
+ *awk*
: grep -i "break" auth.log | awk {'print $12'}
: grep -i "break" auth.log | awk {'print $12'} | grep -v "this"
+ *sed*
: grep -i "break" auth.log | awk {'print $12'} | grep -v "this" | sed 's/\[\|\]//g'
: grep -i "break" auth.log | awk {'print $12'} | grep -v "this" | sed 's/\[\|\]//g' | sort -nr
: grep -i "break" auth.log | awk {'print $12'} | grep -v "this" | sed 's/\[\|\]//g' | sort -nru
: grep -i "break" auth.log | awk {'print $12'} | grep -v "this" | sed 's/\[\|\]//g' | sort -nru > list
+ *Scripting101*
: for i in $(cat list);do echo $i;done
: for i in $(cat list);do whois $i;done
: for i in $(cat list);do whois $i;done | grep -i "china"
: for i in $(cat list | head -4);do ping -c 1 $i;done
: for i in $(cat list | head -4);do ping -c 1 $i;done | grep "PING"
+ *cut*
: for i in $(cat list | head -4);do ping -c 1 $i;done | grep "PING" | cut -d" " -f2
*Understanding Bash script syntax*

*Bash refers to the whole shell*
  + Usually just one command
------------
*A script can contain*
  + Variables
  + Arguments
  + Flow-control logic
------------
*To Shebang or not to Shebang*
  + [[http://en.wikipedia.org/wiki/Shebang_(Unix)][What is The Shebang]]
: #!/bin/bash <-Hashbang or Shebang, tells the shell that this is a Bash script and that it should be run as such
: #!          <-Hash-bang
: /bin/bash   <-PATH to Bash executable
------------
*Making a script*
: mkdir digitalbiology && cd digitalbiology
: mkdir DB_yyyy_mm_dd && cd DB_yyyy_mm_dd
+ Add the following code to a *01script.sh* file:
: for i in {1..50};do echo "echo \"$i\"";done     # Note how we are escaping special characters
: for i in {1..50};do echo "echo \"$i\"";done > 01script.sh
+ *Execute file as follows:*
: ./01script.sh
: bash ./01script.sh
+ Now add:
: #!/path/to/bash
+ And make file *01script.sh* executable:
: $ chmod 744 01script.sh
+ Execute file as follows:
: ./01script.sh
: bash ./01script.sh
------------
*Building Bash Scripts*

*Displaying text with echo*
: echo statement
: echo 'statement'
: echo "statement"
------------
*Working with variables*
+ Named with alphanumeric characters
+ Names must start with a letter
+ *02script.sh*
: #!/bin/bash
: # 02script.sh
: a=hello           # Note No Spaces
: b="Good Morning"  # Note the quotes
: c=42
: # To use these variables we call them with the '$' sign
: echo $a
: echo $b
: echo $c
+ Save *02script.sh* and Run
------------
+ Variables also work inside other variables or strings if they are double quoted
+ *03script.sh*
: #!/bin/bash
: # 03script.sh
: a=hello           # Note No Spaces
: b="Good Morning"  # Note the quotes
: c=44
: # To use these variables we call them with the '$' sign
: echo $a
: echo $b
: echo $c
: 
: echo "$b! I have $c apples" <-NOTE This
+ Save *03script.sh* and Run
------------
*Adding attributes to variables*
+ This means that the variable cannot be modified later arithmetically or by string modification
+ *04script.sh* # Need clarification
: #!/bin/bash
: # 04script.sh
: declare -i d=123      # d is an integer
: declare -r e=456      # e is read-only
: declare -l f=LOLCats  # f is lolcats
: declare -u g=LOLCats  # g is LOLCATS
: echo $d
: echo $e
: echo $f
: echo $g
+ Save *04script.sh* and Run
------------
*Built-in variables*
+ *05script.sh*
: #!/bin/bash
: # 05script.sh
: echo $HOME          # Returns Home directory
: echo $PWD           # Returns current directory
: echo $MACHTYPE      # Returns machine type
: echo $HOSTNAME      # Returns system name
: echo $BASH_VERSION  # Returns Bash version
: echo $SECONDS       # Returns the number of seconds the Bash session has run
:                     # Inside a script it counts the seconds since the script started (timing)
: echo $0             # Returns the name of the script
+ Save *05script.sh* and Run
------------
*Command substitution*
+ *06script.sh*
: #!/bin/bash
: # 06script.sh
: d=$(pwd)
: echo $d
+ Save *06script.sh* and Run
------------
+ *07script.sh*
: #!/bin/bash
: # 07script.sh
: a=$(ping -c 1 google.com | grep 'bytes from' | cut -d = -f 4)
: echo "The ping was $a"
+ Save *07script.sh* and Run
------------
*Arithmetic operations*
: (( expression ))
: val=$(( expression )) # Note the '$' sign
: |----------------|----------|
: | Operation      | Operator |
: |----------------|--------- |
: | Exponentiation | $a ** $b |
: | Multiplication | $a * $b  |
: | Division       | $a / $b  |
: | Modulo         | $a % $b  |
: | Addition       | $a + $b  |
: | Subtraction    | $a - $b  |
: |----------------|----------|
+ *08script.sh*
: #!/bin/bash
: # 08script.sh
: d=2
: e=$((d+2))
: echo "The value of e is $e"
+ Save *08script.sh* and Run
------------
+ *09script.sh*
: #!/bin/bash
: # 09script.sh
: d=2
: e=$((d+2))
: echo "The value of e is $e"
: ((e++))
: echo "The value of e is $e"
: ((e--))
: echo "The value of e is $e"
: ((e+=5))
: echo "The value of e is $e"
: ((e*=3))
: echo "The value of e is $e"
: ((e/=3))
: echo "The value of e is $e"
: ((e-=5))
: echo "The value of e is $e"
+ Save *09script.sh* and Run
------------
+ *10script.sh*
: #!/bin/bash
: # 10script.sh
: f=(1/3)
: echo "The value of e is $f"
+ Save *10script.sh* and Run
------------
+ *11script.sh*
: #!/bin/bash
: # 11script.sh
: f=((1/3))
: echo "The value of e is $f"
: g=$(echo 1/3 | bc -l)
: echo "The value of g is $g"
+ Save *11script.sh* and Run
------------
*Comparing values*
: [[ expression ]]
: 0 = True
: 1 = False
------------
*Comparison operators*
: |--------------------------|----------------|
: | Operation                | Operator       |
: |--------------------------|----------------|
: | Less than                | [[ $a < $b  ]] |
: | Greater than             | [[ $a > $b  ]] |
: | Less than or equal to    | [[ $a <= $b ]] |
: | Greater than or equal to | [[ $a >= $b ]] |
: | Equal                    | [[ $a == $b ]] |
: | Not equal                | [[ $a != $b ]] |
: |--------------------------|----------------|
+ *12script.sh*
: #!/bin/bash
: # 12script.sh
: [[ "cat" == "cat" ]]
: echo $?
: 
: [[ "cat" = "dog" ]]
: echo $?
+ Save *12script.sh* and Run
------------
+ *13script.sh*
: #!/bin/bash
: # 13script.sh
: # 20 and 100 are being compared as strings. Lexical comparison
: [[ 20 > 100 ]]
: echo $?
+ Save *13script.sh* and Run
------------
*Arithmetic operators*
: |--------------------------+-----------------|
: | Operation                | Operator        |
: |--------------------------+-----------------|
: | Less than                | [[ $a -lt $b ]] |
: | Greater than             | [[ $a -gt $b ]] |
: | Less than or equal to    | [[ $a -le $b ]] |
: | Greater than or equal to | [[ $a -ge $b ]] |
: | Equal                    | [[ $a -eq $b ]] |
: | Not equal                | [[ $a -ne $b ]] |
: |--------------------------+-----------------|
------------
+ *14script.sh*
: #!/bin/bash
: # 14script.sh
: # Lexical comparison
: [[ 20 -gt 100 ]]
: echo $?
+ Save *14script.sh* and Run
------------
*Logical operators*
: |--------------+-----------------------|
: | Operation    | Operator              |
: |--------------+-----------------------|
: | Logical AND  | [[ $a && $b ]]        |
: | Logical OR   | [[ $a pipe pipe $b ]] |
: | Logical NOT  | [[ ! $a ]]            |
: | Is Null?     | [[ -z $a ]]           |
: | Is Not Null? | [[ -n $A ]]           |
: |--------------+-----------------------|
+ *15script.sh*
: #!/bin/bash
: # 15script.sh
: # Lexical comparison
: a=""
: b="cat"
: [[ -z $a & -n $b ]]
: echo $?
+ Save *15script.sh* and Run
------------
*Working with strings*
+ Using the command-line:
  : a="Hello" 
  : b="World" 
  : c=$a$b
  : echo $c
  : echo ${c}
  : echo ${#c}      <-To Find out how long the string is
  : d=${c:3}        <-To request a substring
  : echo $d
  : e=${c:3:4}      <-To request a specific number of characters after that position
  :                   asking at character 3 and asking for 4 characters after that
  : echo $e
  : echo ${c}
  : echo ${#c}
  : echo ${c: -10}  <-To request the last 10 letters
  : echo ${c: -8}   <-To request the last 8 letters
  : echo ${c: -8:2} <-To request the last 2 letters of the last 8 letters
  +To replace text in a string with some other text
  : fruit="apple banana banana cherry"
  : echo ${fruit/banana/durian}   <-To replace text in a string with some other text
  :                                 in this case banana with durian or the first instance of the search
  : echo ${fruit//banana/durian}  <-To replace all instances of banana with durian
  : echo ${fruit/#apple/durian}   <-To replace the term only of the term is the very beggining of the string
  : echo ${fruit/#banana/durian}    and it only works if the term is at the beggining of the string
  : echo ${fruit/%cherry/durian}  <-To replace the term only of the term is the very beggining of the string
  : echo ${fruit/%banana/durian}    and it only works if the term is at the beggining of the string
  : echo ${fruit/c*/durian}       <-Using matching terms
------------
*Coloring and styling text*
+ Colored text (using ANSI codes)
  : echo -e '\033[34;42mColor Text\033[0m'
  :      -e <-Allows escaping characters
  :      \033[34;42m    <-Escaped sequence
  :      Color Text     <-String to print out 
  :      \033[0m        <-Reset the colors
+ *Colored text (ANSI)*
  : |---------+------------+------------|
  : | Color   | Foreground | Background |
  : |---------+------------+------------|
  : | Black   |         30 |         40 |
  : | Red     |         31 |         41 |
  : | Green   |         32 |         42 |
  : | Yellow  |         33 |         43 |
  : | Blue    |         34 |         44 |
  : | Magenta |         35 |         45 |
  : | Cyan    |         36 |         46 |
  : | White   |         37 |         47 |
  : |---------+------------+------------|
  : 
  : White on Black
  : echo -e '\033[37;40mColor Text\033[0m' 
  : 
  : Black on Red: 
  : echo -e '\033[30;41mColor Text\033[0m' 
  : 
  : Green on Black
  : echo -e '\033[32;40mColor Text\033[0m' 
  : 
  : Red on White
  : echo -e '\033[31;47mColor Text\033[0m' 
  : 
  : Blue on Yellow
  : echo -e '\033[34;43mColor Text\033[0m' 
+ *Styled text (ANSI)*
  : |---------------+-------|
  : | Style         | Value |
  : |---------------+-------|
  : | No Style      |     0 |
  : | Bold          |     1 |
  : | Low Intensity |     2 |
  : | Underline     |     4 |
  : | Blinking      |     5 |
  : | Reverse       |     7 |
  : | Invisible     |     8 |
  : |---------------+-------|
  : 
  : Error Message
  : echo -e '\033[5;31;42mERROR: \033[0m'
  : echo -e '\033[5;31;42mERROR: \033[0m\033[31;40mSomething went wrong\033[0m' 
------------
*Working with arrays*

+ Simple arrays
  : a=()              <-Empty array
  : b=("apple" "banana" "cherry") <-Array with 3 elements
  : echo ${b[2]}
  : b[5]="kiwi"
  : b+=("mango")
  : echo ${b[@]}
  : echo ${b[@]: -1}  <-To request the last element of the array
------------
+ *29script.sh*
  : #!/bin/bash
  : # 29script.sh
  : a=()
  : b=("apple" "banana" "cherry")
  : 
  : echo ${b[0]}
  : echo ${b[1]}
  : echo ${b[2]}
  : 
  : b[5]="kiwi"
  : b+=("mango")
  : 
  : echo ${b[@]}
  : echo ${b[@]: -1}  #<-To request the last element of the array
+ Save *29script.sh* and Run
------------
+ Associative arrays
  : declare -A myarray
  : myarray[color]=Blue
  : myarray["office" "building"]="TAMU Biology"
  : echo ${myarray["office" "building"]} is ${myarray[color]}
------------
*Reading and writing text files*
: echo "Hello World"
: echo "Hello World" > text.txt
: > text.txt
------------
+ *16script.sh*
  : echo -e "Line01\nLine02\nLine03\nLine04\nLine05" > 16script.txt
  : #!/bin/bash
  : # 16script.sh
  : while read i; do echo $i;done < 16script.txt
+ Save *16script.sh* and Run
------------
+ *17script.sh*
  : echo -e "Command01\nCommand02\nCommand03\nCommand04\nCommand05" > 17script.txt
  : #!/bin/bash
  : # 17script.sh
  : while read i; do echo "$d: $i";done < 17script.txt
+ Save *17script.sh* and Run
------------
+ *Using here documents*
  + Used a lot for entering documentation
  + Avoids multiple 'echo' commands
+ *18script.sh*
  : #!/bin/bash
  : # 18script.sh
  : cat << EndofText
  : Line01
  : Line02
  : Line03
  : EndofText #Must be unique
+ Save *18script.sh* and Run
------------
+ *19script.sh*
  : #!/bin/bash
  : # 19script.sh
  : cat <<EndofText
  :         Line01
  :         Line02
  :         Line03
  : EndofText
  : exit 0
+ Save *19script.sh* and Run
------------
*Control Structures*
+ *Testing truth conditions with the if keyword*
  : 'if' statatement
  : if [[ expression ]] or if (( expression )) or if statement
  : if [[ expression ]]; then echo "True"; else echo "False"; fi
  : if [[ 2 -gt 3 ]]; then echo "True"; else echo "False"; fi
  : if [[ 2 -gt 1 ]]; then echo "True"; else echo "False"; fi
------------
*Working with while and until loops*
+ *20script.sh*
  : #!/bin/bash
  : # 20script.sh
  : i=0
  : while [[ $i -le 10 ]];do
  :     echo i:$i
  :     ((i+=1))
  :     done
+ Save *20script.sh* and Run
------------
+ *21script.sh*
  : #!/bin/bash
  : # 21script.sh
  : i=0
  : while [[ $i -le 10 ]];do
  :     echo i:$i
  :     ((i+=1))
  :     done
  : j=0
  : 
  : j=0
  : until [[ $j -ge 10 ]];do
  :     echo j:$j
  :     ((j+=1))
  :     done
+ Save *21script.sh* and Run
------------
*Introducing for loops*
  : for i in 1 2 3;do echo $i;done
  : for i in {1..10};do echo $i;done
  : for i in {1..100..2};do echo $i;done
+ "C" Style
  : for (( i=1; i<=10; i++)); do echo $i;done
+ With Arrays
  : arr=("Line01" "Line02" "Line03")
  : for i in ${arr[@]};do echo $arr;done
  : for i in ${arr[0]};do echo $arr;done
  : for i in ${arr[2]};do echo $arr;done
------------
*Selecting behavior using case*
+ *22script.sh*
  : #!/bin/bash
  : # 22script.sh
  : a="dog"
  : case $a in
  :          cat)       echo "Feline";;
  :          dog|puppy) echo "Canine";;
  :          *)         echo "No Match";;
  : esac
+ Save *22script.sh* and Run
------------
*Using functions*
  : To avoid repeating code blocks use functions
+ *23script.sh*
  : #!/bin/bash
  : # 23script.sh
  : function test {
  :     echo "Robert"
  : }
  : echo "And now I am greating!"
  : test
+ Save *23script.sh* and Run
------------
+ *24script.sh*
  : #!/bin/bash
  : # 24script.sh
  : function numberthings {
  :     i=1
  :     for f in $@;do
  :     echo $i: $f
  :     ((i+=1))
  :     done
  : }
  : numberthings $(ls)
+ Save *24script.sh* and Run
------------
*Interacting with the user*

*Arguments*
+ *25script.sh*
  : #!/bin/bash
  : # 25script.sh
  : echo $0 # Name of the script
  : echo $1
  : echo $2
  : echo $@ # All variables
  : echo $# # Number of variables
+ Save *25script.sh* and Run
------------
*Flags*
+ *26script.sh*
  : #!/bin/bash
  : # 26script.sh
  : while getopts u:p: option;do
  :     case $option in
  :         u) user=$OPTARG;;
  :         p) pass=$OPTARG;;
  :     esac
  : done
  : echo "User: $user / Passwd: $pass"
+ Save *26script.sh* and Run
  + bash 26script.sh -u rod -p secret
  + bash 26script.sh -p secret -u rod
------------
+ *27script.sh*
  : #!/bin/bash
  : # 27script.sh
  : while getopts u:p:ab option;do
  :     case $option in
  :         u) user=$OPTARG;;
  :         p) pass=$OPTARG;;
  :         a) echo "Got the A Flag";;
  :         b) echo "Got the B Flag";;
  :     esac
  : done
  : echo "User: $user / Passwd: $pass"
+ Save *27script.sh* and Run
  + bash 27script.sh -u rod -p secret
  + bash 27script.sh -p secret -u rod -a
  + bash 27script.sh -p secret -u rod -b
  + bash 27script.sh -p secret -u rod -ab 
------------
+ *28script.sh*
  : #!/bin/bash
  : # 28script.sh
  : while getopts :u:p:ab option;do
  :     case $option in
  :         u) user=$OPTARG;;
  :         p) pass=$OPTARG;;
  :         a) echo "Got the A Flag";;
  :         b) echo "Got the B Flag";;
  :         ?) echo "I do not know what $OPTARG is!";;
  :     esac
  : done
  : echo "User: $user / Passwd: $pass"
+ Save *28script.sh* and Run
  + bash 28script.sh -u rod -p secret
  + bash 28script.sh -p secret -u rod -a
  + bash 28script.sh -p secret -u rod -b
  + bash 28script.sh -p secret -u rod -z 
# ------------
# + *Making the script "read" files:*
#  + Generate a file called "02file.sh" containing:
#   ```sh
#   #!/bin/bash
#   args=("$@");
#   FILENAME00=${args[0]}
#   FILENAME01=${args[1]}
#   FILENAME02=${args[2]}

#   echo $FILENAME00
#   echo $FILENAME01
#   echo $FILENAME02

#   exit 0
#   ```
# ------------
+ *Authors:* Rodolfo Aramayo - raramayo@tamu.edu
------------
+ *License:* [[http://creativecommons.org/licenses/by-nc-sa/3.0/][All content produced in this site is licensed by: CC BY-NC-SA 3.0]]
